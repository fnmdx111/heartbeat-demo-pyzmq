#! /usr/bin/python3

import sys
from utils import msg as msg_, unpack_ret, logger, get_local_ip, ack_gen,\
                  flat_b64extract
from config import MASTER_ADDR, HEARTBEAT_DAEMON_ADDR,\
                   HEARTBEAT_DAEMON_IP, MASTER_IP, HEARTBEAT_INTERVAL,\
                   LANGS_CONF_DIR
import multiprocessing
import subprocess
import time
import base64
import lzma
import zipfile
import io

logger = logger()

debug_ = logger.debug
info_ = logger.info
warning_ = logger.warning
critical_ = logger.critical
error_ = logger.error


try:
    port = sys.argv[2]
except IndexError:
    port = None

local_ip = get_local_ip()

import zmq
ctx = zmq.Context()
ack = ack_gen(ctx)

task_socket = ctx.socket(zmq.PULL)
port = port or task_socket.bind_to_random_port('tcp://%s' % local_ip)
debug_('bound successfully to tcp://%s:%s', local_ip, port)

master_socket = ctx.socket(zmq.PUSH)
master_socket.connect(MASTER_ADDR)
debug_('connect to master successfully')


def heartbeat_daemon():
    hbd_ctx = zmq.Context()
    hbd_socket = hbd_ctx.socket(zmq.PUB)
    hbd_socket.connect(HEARTBEAT_DAEMON_ADDR)

    while True:
        time.sleep(HEARTBEAT_INTERVAL)
        hbd_socket.send_json(msg_(act='heartbeat',
                                  addr='tcp://%s:%s' % (local_ip, port),
                                  msg='<3'))

multiprocessing.Process(target=heartbeat_daemon, daemon=True).start()
info_('heartbeat daemon up')


def target(args):
    return subprocess.check_output(['./test'])


pool = multiprocessing.Pool(maxtasksperchild=15)
while True:
    task = task_socket.recv_json()
    debug_('new task %s', task['act'])

    assert 'act' in task
    act = task['act']

    if act == 'judge':
        info_('judge task received')

        args = task['args']
        initiator_addr = task['addr']

        ack('tcp://%s:%s' % (MASTER_IP, task['ack_port']),
            rd_key=task['rd_key'])

        def callback(result):
            initiator_sck = ctx.socket(zmq.PAIR)
            initiator_sck.connect(initiator_addr)
            initiator_sck.send_json(msg_(act='judge ret',
                                         target=task['addr'],
                                         result=str(result, encoding='ascii')))
            initiator_sck.close()

        def error_callback(error_result):
            initiator_sck = ctx.socket(zmq.PAIR)
            initiator_sck.connect(initiator_addr)
            initiator_sck.send_json(msg_(act='judge ret error',
                                         result=str(error_result)))
            initiator_sck.close()

        pool.apply_async(target, args=(args,),
                         callback=callback,
                         error_callback=error_callback)
    elif act == 'conf update':
        info_('updating conf')

        flat_b64extract(task['payload'], LANGS_CONF_DIR)

        ack(task['addr'])
    else:
        warning_('unable to act, message not understandable')
